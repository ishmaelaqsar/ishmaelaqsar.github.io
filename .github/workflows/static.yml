name: Export and Deploy Org Files

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Install Emacs (headless)
      - name: Install Emacs
        run: |
          sudo apt-get update -y
          sudo apt-get install -y emacs-nox

      # 3Ô∏è‚É£ Export all Org files to HTML
      - name: Export Org files to HTML
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üîç Searching for Org files in ./org ..."
          mkdir -p public
          ls -la org || { echo "‚ùå No org directory found!"; exit 1; }

          # Detect base href automatically
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          if [[ "$GITHUB_REPOSITORY" == *".github.io" ]]; then
            BASE_PATH="/"
          else
            BASE_PATH="/$REPO_NAME/"
          fi
          echo "üåê Detected base href: $BASE_PATH"

          count=0
          for f in org/*.org; do
            [ -e "$f" ] || { echo "‚ö†Ô∏è No .org files found in ./org"; break; }

            echo "üß± Exporting $f ..."
            emacs --batch "$f" \
                  --eval "(require 'ox-html)" \
                  --eval "(setq org-html-link-org-files-as-html t)" \
                  --eval "(setq org-html-relative-url t)" \
                  --eval "(setq org-html-head (concat \"<base href='${BASE_PATH}'><link rel='stylesheet' type='text/css' href='stylesheet.css'>\"))" \
                  --eval "(setq org-export-output-file-name-function (lambda (f) (concat \"public/\" (file-name-nondirectory (concat (file-name-base f) \".html\")))))" \
                  -f org-html-export-to-html

            html_file="public/$(basename "${f%.org}.html")"
            if [ -f "$html_file" ]; then
              echo "‚úÖ Exported: $f ‚Üí $html_file"
              count=$((count + 1))
            else
              echo "‚ùå Failed to export $f"
            fi
          done

          echo "üì¶ Total Org files exported: $count"
          echo "üåê Base href used for export: $BASE_PATH"

      # 4Ô∏è‚É£ Copy stylesheet
      - name: Copy stylesheet
        run: |
          echo "üé® Copying stylesheet.css ‚Üí public/"
          mkdir -p public
          if [ -f stylesheet.css ]; then
            cp stylesheet.css public/
            echo "‚úÖ stylesheet.css copied"
          else
            echo "‚ö†Ô∏è stylesheet.css not found"
          fi

      # 5Ô∏è‚É£ Copy image assets
      - name: Copy assets
        run: |
          echo "üñºÔ∏è Copying assets from org/assets ‚Üí public/assets/"
          mkdir -p public/assets
          if [ -d org/assets ]; then
            cp -r org/assets/* public/assets/ 2>/dev/null || true
            echo "‚úÖ Assets copied"
          else
            echo "‚ö†Ô∏è No assets directory found"
          fi

      # 6Ô∏è‚É£ List exported files
      - name: List exported files
        run: |
          echo "üìÇ Final contents of public/:"
          tree public || find public -type f | sort
          echo "‚úÖ Ready for upload to GitHub Pages"

      # 7Ô∏è‚É£ Setup GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 8Ô∏è‚É£ Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      # 9Ô∏è‚É£ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
